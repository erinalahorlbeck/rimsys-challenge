openapi: 3.0.3
info:
  title: Rimsys Challenge - Erinala Horlbeck
  description: |-
    # Assignment

    Please build an API using Laravel 9.x (latest) to demonstrate your expertise. This API should have the following capabilities:

    1. Full CRUD on a users model
    2. Full CRUD on a document management model
    3. Full CRUD linking documents to users

    Keep in mind that user-friendly APIs consider the end user. To that end, ensure that you include the following:

    1. OpenAPI specification documentation on each endpoint, including full request/response samples
    2. Proper error handling and messaging for invalid requests as well as any potential server-side failures.
    3. Any additional considerations that demonstrate your knowledge of best practices for Restful APIs

  contact:
    email: imn.exc@gmail.com
  #license:
  #  name: MIT
  #  url: https://mit-license.org/
  version: 1.0.0
servers:
  - url: https://rs.local/api/v1
tags:
  - name: user
    description: Operations about users
  - name: document
    description: Operations about documents

paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create (register) a new user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  # /users/login:
  #   post:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/xml:
  #             schema:
  #               type: string
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /users/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  /users/{user-id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByName
      parameters:
        - name: user-id
          in: path
          description: 'The id of the user that needs to be fetched.'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user-id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user or an admin user.
      operationId: updateUser
      parameters:
        - name: user-id
          in: path
          description: user id that needs to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user or an admin user.
      operationId: deleteUser
      parameters:
        - name: user-id
          in: path
          description: The id of the user that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid user-id supplied
        '404':
          description: User not found
  /documents:
    post:
      tags:
        - document
      summary: Create a document
      operationId: createDocument
      requestBody:
        description: Created document object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
          application/xml:
            schema:
              $ref: '#/components/schemas/Document'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: rimsys
        email:
          type: string
          example: example@rimsys.io
        password:
          type: string
          example: 'abc123'
      xml:
        name: user

    Document:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: 'My Rimsys Document'
        body:
          type: string
          example: 'Lorem ipsum dolor sit amet...'
        created_at:
          type: string
          example:
        updated_at:
          type: string
          example:
      xml:
        name: user

    ApiResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
        data:
          type: object

      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:

    api_key:
      type: apiKey
      name: api_key
      in: header
